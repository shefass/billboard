{"version":3,"sources":["App.js","serviceWorker.js","index.js","burstjs.png"],"names":["apiSettings","ApiSettings","api","composeApi","_callee","blocks","blocksWithTransaction","onlyTransactions","blocksWithAttachment","blocksWithMessage","messages","regenerator_default","a","wrap","_context","prev","next","block","getBlocks","sent","filter","b","transactions","length","map","flattenDeep","hasOwnProperty","attachment","messageIsText","message","abrupt","t0","console","error","concat","stop","App","state","_this2","this","getStatus","then","setState","catch","err","log","react_default","createElement","className","src","logo","alt","p","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"+VAUMA,EAAc,IAAIC,cAHR,gCAG6B,SACvCC,EAAMC,qBAAWH,8CAGvB,SAAAI,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEyBd,EAAIe,MAAMC,UAAU,EAAG,KAAK,GAFrD,cAEUb,EAFVS,EAAAK,KAGUb,EAAwBD,EAAOA,OAAOe,OAC1C,SAAAC,GAAC,OAAIA,EAAEC,aAAaC,OAAS,IAEzBhB,EAAmBD,EAAsBkB,IAAI,SAAAH,GAAC,OAAIA,EAAEC,eACpDd,EAAuBiB,sBAAYlB,GAAkBa,OAAO,SAAAC,GAAC,OACjEA,EAAEK,eAAe,gBAEbjB,EAAoBD,EAAqBY,OAAO,SAAAC,GAAC,OACrDA,EAAEM,WAAWD,eAAe,mBAExBhB,EAAWD,EAAkBe,IAAI,SAASH,GAC9C,GAAIA,EAAEM,WAAWC,cACf,OAAOP,EAAEM,WAAWE,UAf5Bf,EAAAgB,OAAA,SAkBWpB,GAlBX,QAAAI,EAAAC,KAAA,GAAAD,EAAAiB,GAAAjB,EAAA,SAqBIkB,QAAQC,MAAR,kCAAAC,OAAgDpB,EAAAiB,GAAEF,UArBtD,yBAAAf,EAAAqB,SAAA/B,EAAA,6CAuDegC,6MA7BbC,MAAQ,CACNR,QAAS,uFAGS,IAAAS,EAAAC,iDAClBC,GACGC,KAAK,SAAA/B,GAAQ,OAAI4B,EAAKI,SAAS,CAC9Bb,QAASnB,MAEViC,MAAM,SAAAC,GAAG,OAAIZ,QAAQa,IAAI,QAASD,EAAIf,4CAI3C,OACEiB,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,OACbF,EAAAlC,EAAAmC,cAAA,UAAQC,UAAU,cAChBF,EAAAlC,EAAAmC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCL,EAAAlC,EAAAmC,cAAA,kCACAD,EAAAlC,EAAAmC,cAAA,+HAGAD,EAAAlC,EAAAmC,cAAA,mHACCR,KAAKF,MAAMR,QAAQL,IAAI,SAAA4B,GAAC,OAAGN,EAAAlC,EAAAmC,cAAA,SAAIK,cAvBtBC,aC3BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAlC,EAAAmC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAnB,EAAuB","file":"static/js/main.4bc6efe4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from './burstjs.png';\nimport './App.css';\nimport { flattenDeep } from \"lodash\";\nimport {composeApi, ApiSettings} from '@burstjs/core';\n\nconst atTestNet = 'http://at-testnet.burst-alliance.org:6876';\nconst testNet = 'https://test-burst.megash.it/';\nconst maiNet = 'https://wallet.burst-alliance.org:8125';\n\nconst apiSettings = new ApiSettings(testNet, 'burst');\nconst api = composeApi(apiSettings);\n\n\nasync function getStatus() {\n  try {\n    const blocks = await api.block.getBlocks(0, 100, true);\n    const blocksWithTransaction = blocks.blocks.filter(\n      b => b.transactions.length > 0\n    );\n    const onlyTransactions = blocksWithTransaction.map(b => b.transactions);\n    const blocksWithAttachment = flattenDeep(onlyTransactions).filter(b =>\n      b.hasOwnProperty(\"attachment\")\n    );\n    const blocksWithMessage = blocksWithAttachment.filter(b =>\n      b.attachment.hasOwnProperty(\"messageIsText\")\n    );\n    const messages = blocksWithMessage.map(function(b) {\n      if (b.attachment.messageIsText) {\n        return b.attachment.message;\n      }\n    });\n    return messages;\n  } catch (e) {\n    // e is of type HttpError (as part of @burstjs/http)\n    console.error(`Whooops, something went wrong: ${e.message}`);\n  }\n}\n\nclass App extends Component {\n  state = {\n    message: []\n  };\n\n  componentDidMount() {\n    getStatus()\n      .then(messages => this.setState({\n        message: messages\n      }))\n      .catch(err => console.log('Error', err.message));\n  }\n \n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>My First BurstJs App</h1>\n        <p>\n          This first version of Billboard. Here you can see all messages that was send at Burst Test net. Sorry no design :) \n        </p>\n        <p>Now showing only messages from past 100 Blocks. Test it by sending message at Testnet and reload page.</p>\n        {this.state.message.map(p =><p>{p}</p>)}\n      \n      </header>\n    </div>\n  );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/burstjs.31d043a0.png\";"],"sourceRoot":""}